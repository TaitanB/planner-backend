{
  "openapi": "3.0.1",
  "info": {
    "title": "Wheel Of Life Planner",
    "description": "This is the Swagger documentation for interacting with our application's API.",
    "contact": {
      "name": "Wheel Of Life Planner",
      "url": "https://taitanb.github.io/planner-frontend/"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "API for 'Wheel Of Life Planner' application",
    "url": "https://github.com/TaitanB/final-project-backend"
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    { "url": "https://planner-backend-se10.onrender.com/api" },
    { "url": "http://localhost:3001/api" }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "Users endpoints"
    },
    {
      "name": "Todos",
      "description": "Todos endpoints"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Users"],
        "summary": "New user registration",
        "produces": ["application/json"],
        "requestBody": {
          "description": "The request body user registration",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user is registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The JWT access token"
                    },
                    "user": {
                      "$ref": "#/components/schemas/UserResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {}
          },
          "409": {
            "description": "Email in use",
            "content": {}
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "User log in",
        "produces": ["application/json"],
        "requestBody": {
          "description": "The request body user log in",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The JWT access token"
                    },
                    "user": {
                      "$ref": "#/components/schemas/UserResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {}
          },
          "401": {
            "description": "The email or password is incorrect",
            "content": {}
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "User logout",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "responses": {
          "204": {
            "description": "Successful user logout",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/users": {
      "put": {
        "tags": ["Users"],
        "summary": "Update user data",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "requestBody": {
          "description": "Request to update user data",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User data updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/UpdateUserResponse"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Get data current user",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Current user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },

    "/todos": {
      "get": {
        "tags": ["Todos"],
        "summary": "Get all todos",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Limit of items per page"
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "Search query for todos"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": ["completed", "overdue", "archived"]
            },
            "description": "Filter todos by status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "string",
                      "description": "1"
                    },
                    "perPage": {
                      "type": "string",
                      "description": "12"
                    },
                    "totalPages": {
                      "type": "string",
                      "description": "452"
                    },
                    "todos": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TodoResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": ["Todos"],
        "summary": "Add new todo",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "requestBody": {
          "description": "Todo data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TodoAddRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Todo added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "example": {
                  "message": "Invalid token"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/todos/delete/{id}": {
      "delete": {
        "tags": ["Todos"],
        "summary": "Delete a todo by id",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Todo's id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Todo deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Todo not found",
            "content": {}
          }
        }
      }
    },
    "/todos/priority/{id}": {
      "patch": {
        "tags": ["Todos"],
        "summary": "Toggle todo to priority",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Todo's id"
          }
        ],
        "responses": {
          "200": {
            "description": "Todo add to priority successfully / Todo deleted from priority",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Notification of successful operation"
                    },
                    "priority": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Priority"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Todo not found",
            "content": {}
          }
        }
      }
    },
    "/todos/priority": {
      "get": {
        "tags": ["Todos"],
        "summary": "Get priority todos",
        "security": [{ "Bearer": [] }],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Limit of items per page"
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "Search query for todos"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "string",
                      "description": "1"
                    },
                    "perPage": {
                      "type": "string",
                      "description": "12"
                    },
                    "totalPages": {
                      "type": "string",
                      "description": "18"
                    },
                    "priority": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TodoResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User name",
            "minLength": 2,
            "maxLength": 16,
            "example": "Qwerty"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "format": "email",
            "example": "qwerty@mail.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "minLength": 6,
            "maxLength": 16,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*d)",
            "example": "Qwerty123"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User email",
            "format": "email",
            "example": "qwerty@mail.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "minLength": 6,
            "maxLength": 16,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*d)",
            "example": "Qwerty123"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User id",
            "example": "nfuwjhretyhbvcbuiwrhty"
          },
          "name": {
            "type": "string",
            "description": "User name",
            "example": "Mango"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "mango@mail.com"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "example": "21-08-2010",
            "default": ""
          },
          "phone": {
            "type": "string",
            "description": "User's phone",
            "example": "+380671234567",
            "default": ""
          },
          "city": {
            "type": "string",
            "description": "User's city",
            "example": "Lviv",
            "default": ""
          },
          "avatarURL": {
            "type": "string",
            "description": "User photo url",
            "example": "https://example.com/avatar.jpg"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User name",
            "minLength": 2,
            "maxLength": 16,
            "example": "Mango"
          },
          "avatar": {
            "type": "string",
            "description": "User photo",
            "format": "binary"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday. Please use DD-MM-YYYY",
            "pattern": "^\\d{2}-\\d{2}-\\d{4}$",
            "example": "21-08-2010",
            "default": ""
          },
          "phone": {
            "type": "string",
            "description": "User's phone",
            "pattern": "^+380d{9}$",
            "example": "+380671234567",
            "default": ""
          },
          "city": {
            "type": "string",
            "description": "User's city",
            "example": "Lviv",
            "default": ""
          }
        }
      },
      "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User id",
            "example": "1259385yjvdsa95kf865098"
          },
          "name": {
            "type": "string",
            "description": "User name",
            "example": "Mango"
          },
          "avatarURL": {
            "type": "string",
            "description": "User photo url",
            "example": "https://example.com/avatar.jpg"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "example": "21-08-2010",
            "default": ""
          },
          "phone": {
            "type": "string",
            "description": "User's phone",
            "example": "+380671234567",
            "default": ""
          },
          "city": {
            "type": "string",
            "description": "User's city",
            "example": "Lviv",
            "default": ""
          },
          "priority": {
            "type": "array",
            "items": {
              "type": "string",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "User's priority todos id",
                  "example": "32143dshtuv2dfyuijhgf45474"
                }
              }
            }
          }
        }
      },

      "TodoAddRequest": {
        "type": "object",
        "required": ["title", "description", "plannedDate"],
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the todo",
            "minLength": 4,
            "maxLength": 30,
            "example": "Name of your todo"
          },
          "description": {
            "type": "string",
            "description": "Description of the todo",
            "minLength": 2,
            "maxLength": 200,
            "example": "Description of your todo"
          },
          "plannedDate": {
            "type": "string",
            "description": "The scheduled date of the case completion.",
            "example": "29.08.2025"
          }
        }
      },
      "TodoResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Todo id",
            "example": "1h23u45iumyhigjfsaitfyg"
          },
          "title": {
            "type": "string",
            "description": "The title of the todo",
            "example": "Name of your todo"
          },
          "description": {
            "type": "string",
            "description": "Description of the todo",
            "example": "Description of your todo"
          },
          "plannedDate": {
            "type": "string",
            "description": "The scheduled date of the case completion.",
            "example": "29.08.2025"
          },
          "completedDate": {
            "type": "string",
            "description": "Date of completion of the case.",
            "example": "null",
            "nullable": true
          },
          "overdueDate": {
            "type": "string",
            "description": "The overdue date of the case completion.",
            "example": "null",
            "nullable": true
          },
          "archivedDate": {
            "type": "string",
            "description": "Date of transfer of the case to the archive.",
            "example": "null",
            "nullable": true
          },
          "owner": {
            "type": "string",
            "description": "The owner id",
            "example": "64fafc29a828e21ac9509f90"
          },
          "createdAt": {
            "type": "string",
            "description": "Date of creation of the item.",
            "example": "2023-10-19T18:26:29.120Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date the item was updated.",
            "example": "2023-10-19T18:26:29.120Z"
          }
        }
      },
      "Priority": {
        "type": "array",
        "items": {
          "type": "string",
          "properties": {
            "_id": {
              "type": "string",
              "description": "User's priority todo id",
              "example": "32143dshtuv2dfyuijhgf45474"
            }
          }
        }
      },
      "DeleteResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Notification of successful deletion"
          },
          "deletedTodoId": {
            "type": "string",
            "description": "Id of the deleted object"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
